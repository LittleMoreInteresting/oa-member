// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.4

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type MemberServiceHTTPServer interface {
	CreateMember(context.Context, *CreateMemberRequest) (*CreateMemberReply, error)
	DeleteMember(context.Context, *DeleteMemberRequest) (*DeleteMemberReply, error)
	GetMember(context.Context, *GetMemberRequest) (*GetMemberReply, error)
	ListMember(context.Context, *ListMemberRequest) (*ListMemberReply, error)
	UpdateMember(context.Context, *UpdateMemberRequest) (*UpdateMemberReply, error)
}

func RegisterMemberServiceHTTPServer(s *http.Server, srv MemberServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/member/", _MemberService_CreateMember0_HTTP_Handler(srv))
	r.PUT("/v1/member/", _MemberService_UpdateMember0_HTTP_Handler(srv))
	r.DELETE("/v1/member/{id}", _MemberService_DeleteMember0_HTTP_Handler(srv))
	r.DELETE("/v1/member/{id}", _MemberService_GetMember0_HTTP_Handler(srv))
	r.GET("/v1/members/", _MemberService_ListMember0_HTTP_Handler(srv))
}

func _MemberService_CreateMember0_HTTP_Handler(srv MemberServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateMemberRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.member.v1.MemberService/CreateMember")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateMember(ctx, req.(*CreateMemberRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateMemberReply)
		return ctx.Result(200, reply)
	}
}

func _MemberService_UpdateMember0_HTTP_Handler(srv MemberServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateMemberRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.member.v1.MemberService/UpdateMember")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMember(ctx, req.(*UpdateMemberRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateMemberReply)
		return ctx.Result(200, reply)
	}
}

func _MemberService_DeleteMember0_HTTP_Handler(srv MemberServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteMemberRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.member.v1.MemberService/DeleteMember")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteMember(ctx, req.(*DeleteMemberRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteMemberReply)
		return ctx.Result(200, reply)
	}
}

func _MemberService_GetMember0_HTTP_Handler(srv MemberServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMemberRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.member.v1.MemberService/GetMember")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMember(ctx, req.(*GetMemberRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMemberReply)
		return ctx.Result(200, reply)
	}
}

func _MemberService_ListMember0_HTTP_Handler(srv MemberServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMemberRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.member.v1.MemberService/ListMember")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMember(ctx, req.(*ListMemberRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListMemberReply)
		return ctx.Result(200, reply)
	}
}

type MemberServiceHTTPClient interface {
	CreateMember(ctx context.Context, req *CreateMemberRequest, opts ...http.CallOption) (rsp *CreateMemberReply, err error)
	DeleteMember(ctx context.Context, req *DeleteMemberRequest, opts ...http.CallOption) (rsp *DeleteMemberReply, err error)
	GetMember(ctx context.Context, req *GetMemberRequest, opts ...http.CallOption) (rsp *GetMemberReply, err error)
	ListMember(ctx context.Context, req *ListMemberRequest, opts ...http.CallOption) (rsp *ListMemberReply, err error)
	UpdateMember(ctx context.Context, req *UpdateMemberRequest, opts ...http.CallOption) (rsp *UpdateMemberReply, err error)
}

type MemberServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewMemberServiceHTTPClient(client *http.Client) MemberServiceHTTPClient {
	return &MemberServiceHTTPClientImpl{client}
}

func (c *MemberServiceHTTPClientImpl) CreateMember(ctx context.Context, in *CreateMemberRequest, opts ...http.CallOption) (*CreateMemberReply, error) {
	var out CreateMemberReply
	pattern := "/v1/member/"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.member.v1.MemberService/CreateMember"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MemberServiceHTTPClientImpl) DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...http.CallOption) (*DeleteMemberReply, error) {
	var out DeleteMemberReply
	pattern := "/v1/member/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.member.v1.MemberService/DeleteMember"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MemberServiceHTTPClientImpl) GetMember(ctx context.Context, in *GetMemberRequest, opts ...http.CallOption) (*GetMemberReply, error) {
	var out GetMemberReply
	pattern := "/v1/member/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.member.v1.MemberService/GetMember"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MemberServiceHTTPClientImpl) ListMember(ctx context.Context, in *ListMemberRequest, opts ...http.CallOption) (*ListMemberReply, error) {
	var out ListMemberReply
	pattern := "/v1/members/"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.member.v1.MemberService/ListMember"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MemberServiceHTTPClientImpl) UpdateMember(ctx context.Context, in *UpdateMemberRequest, opts ...http.CallOption) (*UpdateMemberReply, error) {
	var out UpdateMemberReply
	pattern := "/v1/member/"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.member.v1.MemberService/UpdateMember"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
