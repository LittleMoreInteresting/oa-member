// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/member/v1/member.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Member with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Member) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Member with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MemberMultiError, or nil if none found.
func (m *Member) ValidateAll() error {
	return m.validate(true)
}

func (m *Member) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Mobile

	// no validation rules for Email

	if len(errors) > 0 {
		return MemberMultiError(errors)
	}

	return nil
}

// MemberMultiError is an error wrapping multiple validation errors returned by
// Member.ValidateAll() if the designated constraints aren't met.
type MemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberMultiError) AllErrors() []error { return m }

// MemberValidationError is the validation error returned by Member.Validate if
// the designated constraints aren't met.
type MemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberValidationError) ErrorName() string { return "MemberValidationError" }

// Error satisfies the builtin error interface
func (e MemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberValidationError{}

// Validate checks the field values on CreateMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMemberRequestMultiError, or nil if none found.
func (m *CreateMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 20 {
		err := CreateMemberRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMobile()) != 11 {
		err := CreateMemberRequestValidationError{
			field:  "Mobile",
			reason: "value length must be 11 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = CreateMemberRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateMemberRequestMultiError(errors)
	}

	return nil
}

func (m *CreateMemberRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CreateMemberRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CreateMemberRequestMultiError is an error wrapping multiple validation
// errors returned by CreateMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMemberRequestMultiError) AllErrors() []error { return m }

// CreateMemberRequestValidationError is the validation error returned by
// CreateMemberRequest.Validate if the designated constraints aren't met.
type CreateMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMemberRequestValidationError) ErrorName() string {
	return "CreateMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMemberRequestValidationError{}

// Validate checks the field values on CreateMemberReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateMemberReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMemberReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMemberReplyMultiError, or nil if none found.
func (m *CreateMemberReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMemberReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMemberReplyValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMemberReplyValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMemberReplyValidationError{
				field:  "Member",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMemberReplyMultiError(errors)
	}

	return nil
}

// CreateMemberReplyMultiError is an error wrapping multiple validation errors
// returned by CreateMemberReply.ValidateAll() if the designated constraints
// aren't met.
type CreateMemberReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMemberReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMemberReplyMultiError) AllErrors() []error { return m }

// CreateMemberReplyValidationError is the validation error returned by
// CreateMemberReply.Validate if the designated constraints aren't met.
type CreateMemberReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMemberReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMemberReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMemberReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMemberReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMemberReplyValidationError) ErrorName() string {
	return "CreateMemberReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMemberReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMemberReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMemberReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMemberReplyValidationError{}

// Validate checks the field values on UpdateMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMemberRequestMultiError, or nil if none found.
func (m *UpdateMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateMemberRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 20 {
		err := UpdateMemberRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMobile()) != 11 {
		err := UpdateMemberRequestValidationError{
			field:  "Mobile",
			reason: "value length must be 11 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = UpdateMemberRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateMemberRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateMemberRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UpdateMemberRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UpdateMemberRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMemberRequestMultiError) AllErrors() []error { return m }

// UpdateMemberRequestValidationError is the validation error returned by
// UpdateMemberRequest.Validate if the designated constraints aren't met.
type UpdateMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMemberRequestValidationError) ErrorName() string {
	return "UpdateMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMemberRequestValidationError{}

// Validate checks the field values on UpdateMemberReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateMemberReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMemberReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMemberReplyMultiError, or nil if none found.
func (m *UpdateMemberReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMemberReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMemberReplyValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMemberReplyValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMemberReplyValidationError{
				field:  "Member",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateMemberReplyMultiError(errors)
	}

	return nil
}

// UpdateMemberReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateMemberReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateMemberReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMemberReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMemberReplyMultiError) AllErrors() []error { return m }

// UpdateMemberReplyValidationError is the validation error returned by
// UpdateMemberReply.Validate if the designated constraints aren't met.
type UpdateMemberReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMemberReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMemberReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMemberReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMemberReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMemberReplyValidationError) ErrorName() string {
	return "UpdateMemberReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMemberReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMemberReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMemberReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMemberReplyValidationError{}

// Validate checks the field values on DeleteMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMemberRequestMultiError, or nil if none found.
func (m *DeleteMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteMemberRequestMultiError(errors)
	}

	return nil
}

// DeleteMemberRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMemberRequestMultiError) AllErrors() []error { return m }

// DeleteMemberRequestValidationError is the validation error returned by
// DeleteMemberRequest.Validate if the designated constraints aren't met.
type DeleteMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMemberRequestValidationError) ErrorName() string {
	return "DeleteMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMemberRequestValidationError{}

// Validate checks the field values on DeleteMemberReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteMemberReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMemberReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMemberReplyMultiError, or nil if none found.
func (m *DeleteMemberReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMemberReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteMemberReplyMultiError(errors)
	}

	return nil
}

// DeleteMemberReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteMemberReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteMemberReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMemberReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMemberReplyMultiError) AllErrors() []error { return m }

// DeleteMemberReplyValidationError is the validation error returned by
// DeleteMemberReply.Validate if the designated constraints aren't met.
type DeleteMemberReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMemberReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMemberReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMemberReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMemberReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMemberReplyValidationError) ErrorName() string {
	return "DeleteMemberReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMemberReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMemberReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMemberReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMemberReplyValidationError{}

// Validate checks the field values on GetMemberRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMemberRequestMultiError, or nil if none found.
func (m *GetMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetMemberRequestMultiError(errors)
	}

	return nil
}

// GetMemberRequestMultiError is an error wrapping multiple validation errors
// returned by GetMemberRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMemberRequestMultiError) AllErrors() []error { return m }

// GetMemberRequestValidationError is the validation error returned by
// GetMemberRequest.Validate if the designated constraints aren't met.
type GetMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMemberRequestValidationError) ErrorName() string { return "GetMemberRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMemberRequestValidationError{}

// Validate checks the field values on GetMemberReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMemberReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMemberReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetMemberReplyMultiError,
// or nil if none found.
func (m *GetMemberReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMemberReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMemberReplyValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMemberReplyValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMemberReplyValidationError{
				field:  "Member",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMemberReplyMultiError(errors)
	}

	return nil
}

// GetMemberReplyMultiError is an error wrapping multiple validation errors
// returned by GetMemberReply.ValidateAll() if the designated constraints
// aren't met.
type GetMemberReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMemberReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMemberReplyMultiError) AllErrors() []error { return m }

// GetMemberReplyValidationError is the validation error returned by
// GetMemberReply.Validate if the designated constraints aren't met.
type GetMemberReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMemberReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMemberReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMemberReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMemberReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMemberReplyValidationError) ErrorName() string { return "GetMemberReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetMemberReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMemberReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMemberReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMemberReplyValidationError{}

// Validate checks the field values on ListMemberRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMemberRequestMultiError, or nil if none found.
func (m *ListMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListMemberRequestMultiError(errors)
	}

	return nil
}

// ListMemberRequestMultiError is an error wrapping multiple validation errors
// returned by ListMemberRequest.ValidateAll() if the designated constraints
// aren't met.
type ListMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMemberRequestMultiError) AllErrors() []error { return m }

// ListMemberRequestValidationError is the validation error returned by
// ListMemberRequest.Validate if the designated constraints aren't met.
type ListMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMemberRequestValidationError) ErrorName() string {
	return "ListMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMemberRequestValidationError{}

// Validate checks the field values on ListMemberReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListMemberReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMemberReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMemberReplyMultiError, or nil if none found.
func (m *ListMemberReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMemberReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMemberReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMemberReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMemberReplyValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMemberReplyMultiError(errors)
	}

	return nil
}

// ListMemberReplyMultiError is an error wrapping multiple validation errors
// returned by ListMemberReply.ValidateAll() if the designated constraints
// aren't met.
type ListMemberReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMemberReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMemberReplyMultiError) AllErrors() []error { return m }

// ListMemberReplyValidationError is the validation error returned by
// ListMemberReply.Validate if the designated constraints aren't met.
type ListMemberReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMemberReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMemberReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMemberReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMemberReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMemberReplyValidationError) ErrorName() string { return "ListMemberReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListMemberReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMemberReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMemberReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMemberReplyValidationError{}
